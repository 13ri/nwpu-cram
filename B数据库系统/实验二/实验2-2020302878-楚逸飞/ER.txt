##以下没有说明是复合属性的默认是简单属性。

①BookTitle
强实体，属性如下：
Author，			多值属性
Title，			单值属性
ISBN,			主键，单值属性
PublisherName，	单值属性
Edition，			单值属性
DateOfPublication，	单值属性
Price，			单值属性
BookDescription，	单值属性
(一本书可能有多个作者，所以Author应该是多值属性；
因为不同的书以及同一本书的不同版本都有唯一的ISBN，故ISBN是主键)

②Publisher
强实体，属性如下：
PublisherName,		主键
Address，			单值属性
(不同出版社的名称一定是不同的，所以PublisherName可以作为Publisher的主键，这也比较符合常识；
另外，现实中不同出版的地址是不可能相同的，所以地址可以作为候选键)

③Customer
强实体，属性如下：
Name，			单值属性
CustomerID,主键，	单值属性
MailingAddress，	单值属性
CreditCardNumberAndExpirationData,复合属性,多值属性
PhoneNumber,		多值属性
EmailAddress，		单值属性
(不同的Customer可以有相同的名字，所以加入CustomerID属性作为Cusomer的主键；
CreditCardNumberAndExpirationData表示用户的信用卡号码和有效期，其中信用卡号可以有多个，
所以这个属性既是复合属性又是多值属性；
PhoneNumber表示用户的电话号码，一个用户可有多个电话号码，所以是多值属性;
##当然我也同意PhoneNumber可以被设计为单值属性，因为对于一个CCustomer而言一个PhoneNumber足矣)

④Order
强实体，属性如下：
OrderNumber,		主键，单值属性
CustomerID		外键，单值属性
MailingAddress		单值属性
CreditCard			单值属性
ShipmentMethod	派生属性，单值属性
DateAndTime,		复合属性，单值属性
Price			复合属性，单值属性
(不同的订单一定有不同的OrderNumber，所以其是Order的主键；
ShipmentMethod在需求中只有两种方式——次日交货、定期邮寄，
而这是可以通过发货日期以及订单日期推出的，所以是派生属性；
DateAndTime表示订单日期以及时间，是复合属性(分别用DATE和TIME类型；
Order中还应该包含拥有此Order的用户的ID；
在需求中Price中含有多个部分，所以是复合属性)

⑤FulfilledOrder
弱实体(如果没有Order就一定没有FulfilledOrder，并且FulfilledOrder主键和Order相同，所以是弱实体)，属性如下：
OrderNumber,		主键，单值属性
CustomerID		外键，单值属性
MailingAddress		单值属性
CreditCard			单值属性
ShipmentMethod	派生属性，单值属性
DateAndTime,		复合属性，单值属性
Price			复合属性，单值属性
(以上属性和Order相同，这是因为在此系统中，用户付完Order的费用后，Order变为FulfilledOrder，、
因此FulfilledOrder要拥有Order的全部信息，以便保存这次交易记录)
ShipmentDate		单值属性	
TrackingNumber		单值属性
ExpectedDeliveryDate	单值属性
TitlesAndQuantity,	复合属性,多值属性
(TitlesAndQuantity表示FulfilledOrder中包含哪些书以及这些书各有多少本，因此既是复合属性又是多值属性)

⑥Promotion
强实体，属性如下：
PromotionID,		主键，单值属性
PromotedBook,		多值属性
PercentageDiscountPoints，复合属性，单值属性
Duration,			复合属性，单值属性
(在一次促销活动中，一般会有多本书被促销，故PromotedBook是多值属性；
PercentageDiscountPoints中，不同书的促销力度(折扣)一般是不同的，所以其是复合属性；
Duration表示开始日期以及结束日期，因此是复合属性，由于开始日期与结束日期必须区分开来，因此不能是多值属性)

⑦OrderItem
弱实体(没有Order就一定不会有OrderItem)，属性如下：
itemID,			主键，单值属性
OrderNumber		外键，单值属性
BookNum			单值属性
ISBN			单值属性
TotalPrice			单值属性
(每个Orderitem——订单条目应该有自己的编号，这是它的主键；
一个条目中还包含有多少本那种书以及总价格，所以应该有BookNum，ISBN，TotalPrice三个属性，
这里一个条目中只有一个ISBN对应的书，并且并不是每一本书都一定会有人买，所以应该在OrderItem中
加入ISBN属性而不是在BookTitle中加入itemID属性，实际上OrderItem是连接BookTitle与Order的桥梁)

##在之前Order的Price属性中以及涉及了有哪些书以及分别有多本的问题，但是我个人仍然认为OrderItem实体
的存在是必要的，因为将所有的信息整合在一个属性中以至于这个属性可能太庞大往往不是一种好的选择，
这可能导致不能高效地从一个含有众多内容的属性中快速准确识别并抽离出某一次查询所需要的一小部分，
当让这也并不意味着Order中将众多信息集合在一起的属性不好，
在需要向Customer一次展示所有东西而不想一点一点得从数据库中拿出时，0这种做法是高效的。

⑧Shipment
ShipmentID,		主键，单值属性
ShipmentDate		单值属性
ShipmentMethod	单值属性
OrderNumer，		外键，单值属性
(每一个Shipment有一个自己的ID，这也是其主键；
一个FulfilledOrder可以分为多个Shipment来运送，但是一个Shipment只能属于一个FulfilledOrder，
所以应该有一个OrderNum属性)

⑨Category
CategoryName,		主键，单值属性
ISBNofCategory,		多值属性
SonCatagoryName,	多值属性
(每本书都有自己的种类，考虑到种类也可以是某一种类的自种类，所以将Category单独拿出作为一个实体；
不同种类的名称一定是不同的，如果相同那一定是同一个种类，所以CategoryName可以作为Category的主键；
一个种类中可以有多个ISBN对应的书，所以ISBNofCategory是多值属性；
一个种类可能有一个或多个子种类，也可能没有子种类，基于这些情况，SonCategoryName是多值属性)


基数约束和参与性约束分析：
①一位Customer可以有0到多个Order，这是显然的，因为Customer并不一定要采购书，其可能只是浏览或者查询书
②一个Order可以有多个OrderItem并且至少有一个OrderItem(没有OrderItem的Order没有存在价值)
③一个OrderItem中有且只能有一到多本一个ISBN的书
④一个BookTitle可以属于多个Category
⑤一个Category可以有多个子Category
⑥一次促销活动中至少应该促销一个ISBN对应的书，当然通常会有很多书被促销
⑦一个出版社应该至少出版了一个ISBN对应的书，当然通常会出版很多书
⑧一个Order在Customer为其付钱后就变成FulfilledOrder(将原本的Order删除，新加一个FulfilledOrder，
   这个FulfilledOrder包含了之前Order的全部信息，在上文中已经提到)，所以二者是一对一的关系
⑨一个Shipment只能运送一个Fulfilled的内容，但是由于Customer购买(付钱)的书本并不一定会有库存，
  也可能其中一些书有库存而另一些没有库存，所以一个FulfilledOrder可能暂时对应0个Shipment(当然在库存
  足够之后便不再对应0个Shipment)，也可能对应一个(有充足的库存)或者多个Shipment(一部分有库存而另一部分没有)
























